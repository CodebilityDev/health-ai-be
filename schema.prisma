// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model ServerLog {
  id           String    @id @default(cuid())
  method       String    @default("")
  url          String    @default("")
  graphql      String    @default("")
  status       String    @default("")
  elapsed      String    @default("")
  userID       String    @default("")
  errorMessage String    @default("")
  createdAt    DateTime? @default(now())
}

model ServerError {
  id           String    @id @default(cuid())
  errorMessage String    @default("")
  url          String    @default("")
  graphql      String    @default("")
  createdAt    DateTime? @default(now())
  status       String    @default("")
  method       String    @default("")
  userID       String    @default("")
}

model User {
  id               String         @id @default(cuid())
  name             String         @default("")
  lastName         String         @default("")
  email            String         @unique @default("")
  adminPassword    String?
  localAuth        UserLocalAuth? @relation("User_localAuth", fields: [localAuthId], references: [id])
  localAuthId      String?        @unique @map("localAuth")
  avatar_filesize  Int?
  avatar_extension String?
  avatar_width     Int?
  avatar_height    Int?
  avatar_id        String?
  role             UserRoleType?  @default(user)
  createdAt        DateTime?      @default(now())
  groups           GroupMember[]  @relation("GroupMember_user")
}

model UserLocalAuth {
  id                 String    @id @default(cuid())
  password           String    @default("")
  twoFaEmail         String    @default("")
  twoFaEmailSecret   String    @default("")
  twoFaEmailLastSent DateTime?
  user               User?     @relation("User_localAuth")
}

model Group {
  id                         String                 @id @default(cuid())
  name                       String                 @default("")
  members                    GroupMember[]          @relation("GroupMember_group")
  botConfig                  BotConfig?             @relation("BotConfig_group")
  conversationBotConfig      ConversationBotConfig? @relation("ConversationBotConfig_group")
  ghlAccess                  GHLAccess?             @relation("GHLAccess_group")
  aiKey                      AIKey?                 @relation("AIKey_group")
  enable_globalWelcome       Boolean                @default(false)
  enable_globalContactUpdate Boolean                @default(false)
  enable_globalAutoReply     Boolean                @default(false)
  check_dndNotice            Boolean                @default(false)
  dndNoticeMessage           String                 @default("")
  enable_checkDnd            Boolean                @default(false)
  enable_checkProfanity      Boolean                @default(false)
  enable_botIsAssistant      Boolean                @default(false)
  botAssistantName           String                 @default("")
  enable_noSSN               Boolean                @default(false)
  contactConfigs             Json?
  availability_start         Int?
  availability_end           Int?
  availability_enabled       Boolean                @default(false)
  user_contextFields         Json?
  aiLogs                     GroupAILog[]           @relation("GroupAILog_group")
  snippets                   Snippet[]              @relation("Snippet_group")
  agent_firstName            String                 @default("")
  agent_lastName             String                 @default("")
  enable_stopNotice          Boolean                @default(false)
}

model GroupAILog {
  id           String  @id @default(cuid())
  group        Group?  @relation("GroupAILog_group", fields: [groupId], references: [id])
  groupId      String? @map("group")
  contactID    String  @default("")
  contactName  String  @default("")
  locationID   String  @default("")
  locationName String  @default("")
  modelID      String  @default("")
  type         String  @default("")
  status       String  @default("")
  log          Json?

  @@index([groupId])
}

model GroupMember {
  id      String  @id @default(cuid())
  group   Group?  @relation("GroupMember_group", fields: [groupId], references: [id])
  groupId String? @map("group")
  user    User?   @relation("GroupMember_user", fields: [userId], references: [id])
  userId  String? @map("user")
  access  Int?    @default(1)

  @@index([groupId])
  @@index([userId])
}

model BotConfig {
  id                      String        @id @default(cuid())
  name                    String        @default("")
  companyStatement        String        @default("")
  tonestyle               String        @default("")
  priorityPlan            String        @default("")
  healthInsuranceCarriers String        @default("")
  presentationStrategy    String        @default("")
  specificQuestions       String        @default("")
  summaryPrompt           String        @default("")
  welcomeMessage          String        @default("")
  welcomeMessageFormat    String        @default("")
  noZipCodeMessage        String        @default("")
  group                   Group?        @relation("BotConfig_group", fields: [groupId], references: [id])
  groupId                 String?       @unique @map("group")
  sessions                ChatSession[] @relation("ChatSession_botConfig")
}

model ConversationBotConfig {
  id                      String                    @id @default(cuid())
  name                    String                    @default("")
  companyStatement        String                    @default("")
  tonestyle               String                    @default("")
  priorityPlan            String                    @default("")
  healthInsuranceCarriers String                    @default("")
  presentationStrategy    String                    @default("")
  specificQuestions       String                    @default("")
  summaryPrompt           String                    @default("")
  welcomeMessage          String                    @default("")
  welcomeMessageFormat    String                    @default("")
  noZipCodeMessage        String                    @default("")
  group                   Group?                    @relation("ConversationBotConfig_group", fields: [groupId], references: [id])
  groupId                 String?                   @unique @map("group")
  sessions                ChatConversationSession[] @relation("ChatConversationSession_botConfig")
}

model Snippet {
  id      String  @id @default(cuid())
  name    String  @default("")
  tags    String  @default("")
  content String  @default("")
  comment String  @default("")
  group   Group?  @relation("Snippet_group", fields: [groupId], references: [id])
  groupId String? @map("group")

  @@index([groupId])
}

model GHLAccess {
  id           String    @id @default(cuid())
  group        Group?    @relation("GHLAccess_group", fields: [groupId], references: [id])
  groupId      String?   @unique @map("group")
  refreshToken String    @default("")
  ghsUserId    String    @default("")
  planId       String    @default("")
  locationId   String    @default("")
  companyId    String    @default("")
  scope        String    @default("")
  updatedAt    DateTime? @default(now())
}

model AIKey {
  id         String  @id @default(cuid())
  group      Group?  @relation("AIKey_group", fields: [groupId], references: [id])
  groupId    String? @unique @map("group")
  openapiKey String  @default("")
}

model ChatSession {
  id          String     @id @default(cuid())
  keywords    String     @default("")
  sessionData Json?
  botConfig   BotConfig? @relation("ChatSession_botConfig", fields: [botConfigId], references: [id])
  botConfigId String?    @map("botConfig")

  @@index([botConfigId])
}

model ChatConversationSession {
  id          String                 @id @default(cuid())
  keywords    String                 @default("")
  sessionData Json?
  botConfig   ConversationBotConfig? @relation("ChatConversationSession_botConfig", fields: [botConfigId], references: [id])
  botConfigId String?                @map("botConfig")

  @@index([botConfigId])
}

enum UserRoleType {
  dev
  admin
  user
}
