// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model ServerLog {
  id           String    @id @default(cuid())
  method       String    @default("")
  url          String    @default("")
  graphql      String    @default("")
  status       String    @default("")
  elapsed      String    @default("")
  userID       String    @default("")
  errorMessage String    @default("")
  createdAt    DateTime? @default(now())
}

model ServerError {
  id           String    @id @default(cuid())
  errorMessage String    @default("")
  url          String    @default("")
  graphql      String    @default("")
  createdAt    DateTime? @default(now())
  status       String    @default("")
  method       String    @default("")
  userID       String    @default("")
}

model User {
  id               String         @id @default(cuid())
  name             String         @default("")
  lastName         String         @default("")
  email            String         @unique @default("")
  adminPassword    String?
  localAuth        UserLocalAuth? @relation("User_localAuth", fields: [localAuthId], references: [id])
  localAuthId      String?        @unique @map("localAuth")
  avatar_filesize  Int?
  avatar_extension String?
  avatar_width     Int?
  avatar_height    Int?
  avatar_id        String?
  role             UserRoleType?  @default(user)
  createdAt        DateTime?      @default(now())
  groups           GroupMember[]  @relation("GroupMember_user")
  botConfig        BotConfig?     @relation("BotConfig_user")
  ghlAccess        GHLAccess?     @relation("GHLAccess_user")
  aiKey            AIKey?         @relation("AIKey_user")
}

model UserLocalAuth {
  id                 String    @id @default(cuid())
  password           String    @default("")
  twoFaEmail         String    @default("")
  twoFaEmailSecret   String    @default("")
  twoFaEmailLastSent DateTime?
  user               User?     @relation("User_localAuth")
}

model Group {
  id      String        @id @default(cuid())
  name    String        @default("")
  members GroupMember[] @relation("GroupMember_group")
}

model GroupMember {
  id      String  @id @default(cuid())
  group   Group?  @relation("GroupMember_group", fields: [groupId], references: [id])
  groupId String? @map("group")
  user    User?   @relation("GroupMember_user", fields: [userId], references: [id])
  userId  String? @map("user")
  access  Int?    @default(1)

  @@index([groupId])
  @@index([userId])
}

model BotConfig {
  id                      String        @id @default(cuid())
  name                    String        @default("")
  companyStatement        String        @default("")
  tonestyle               String        @default("")
  priorityPlan            String        @default("")
  healthInsuranceCarriers String        @default("")
  presentationStrategy    String        @default("")
  specificQuestions       String        @default("")
  summaryPrompt           String        @default("")
  welcomeMessage          String        @default("")
  user                    User?         @relation("BotConfig_user", fields: [userId], references: [id])
  userId                  String?       @unique @map("user")
  sessions                ChatSession[] @relation("ChatSession_botConfig")
}

model GHLAccess {
  id           String  @id @default(cuid())
  user         User?   @relation("GHLAccess_user", fields: [userId], references: [id])
  userId       String? @unique @map("user")
  refreshToken String  @default("")
  ghsUserId    String  @default("")
  planId       String  @default("")
  locationId   String  @default("")
  companyId    String  @default("")
  scope        String  @default("")
}

model AIKey {
  id         String  @id @default(cuid())
  user       User?   @relation("AIKey_user", fields: [userId], references: [id])
  userId     String? @unique @map("user")
  openapiKey String  @default("")
}

model ChatSession {
  id          String     @id @default(cuid())
  keywords    String     @default("")
  sessionData Json?
  botConfig   BotConfig? @relation("ChatSession_botConfig", fields: [botConfigId], references: [id])
  botConfigId String?    @map("botConfig")

  @@index([botConfigId])
}

enum UserRoleType {
  dev
  admin
  user
}
