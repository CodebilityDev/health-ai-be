# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type ServerLog {
  id: ID!
  method: String
  url: String
  graphql: String
  status: String
  elapsed: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ServerLogWhereUniqueInput {
  id: ID
}

input ServerLogWhereInput {
  AND: [ServerLogWhereInput!]
  OR: [ServerLogWhereInput!]
  NOT: [ServerLogWhereInput!]
  id: IDFilter
  method: StringFilter
  url: StringFilter
  graphql: StringFilter
  status: StringFilter
  elapsed: StringFilter
  userID: StringFilter
  errorMessage: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ServerLogOrderByInput {
  id: OrderDirection
  method: OrderDirection
  url: OrderDirection
  graphql: OrderDirection
  status: OrderDirection
  elapsed: OrderDirection
  userID: OrderDirection
  errorMessage: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ServerLogUpdateInput {
  method: String
  url: String
  graphql: String
  status: String
  elapsed: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

input ServerLogUpdateArgs {
  where: ServerLogWhereUniqueInput!
  data: ServerLogUpdateInput!
}

input ServerLogCreateInput {
  method: String
  url: String
  graphql: String
  status: String
  elapsed: String
  userID: String
  errorMessage: String
  createdAt: DateTime
}

type ServerError {
  id: ID!
  errorMessage: String
  url: String
  graphql: String
  createdAt: DateTime
  status: String
  method: String
  userID: String
}

input ServerErrorWhereUniqueInput {
  id: ID
}

input ServerErrorWhereInput {
  AND: [ServerErrorWhereInput!]
  OR: [ServerErrorWhereInput!]
  NOT: [ServerErrorWhereInput!]
  id: IDFilter
  errorMessage: StringFilter
  url: StringFilter
  graphql: StringFilter
  createdAt: DateTimeNullableFilter
  status: StringFilter
  method: StringFilter
  userID: StringFilter
}

input ServerErrorOrderByInput {
  id: OrderDirection
  errorMessage: OrderDirection
  url: OrderDirection
  graphql: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  method: OrderDirection
  userID: OrderDirection
}

input ServerErrorUpdateInput {
  errorMessage: String
  url: String
  graphql: String
  createdAt: DateTime
  status: String
  method: String
  userID: String
}

input ServerErrorUpdateArgs {
  where: ServerErrorWhereUniqueInput!
  data: ServerErrorUpdateInput!
}

input ServerErrorCreateInput {
  errorMessage: String
  url: String
  graphql: String
  createdAt: DateTime
  status: String
  method: String
  userID: String
}

type User {
  id: ID!
  name: String
  lastName: String
  displayName: String
  email: String
  adminPassword: PasswordState
  avatar: ImageFieldOutput
  role: UserRoleType
  createdAt: DateTime
  groups(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupsCount(where: GroupMemberWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum UserRoleType {
  dev
  admin
  user
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  lastName: StringFilter
  email: StringFilter
  adminPassword: PasswordFilter
  localAuth: UserLocalAuthWhereInput
  role: UserRoleTypeNullableFilter
  createdAt: DateTimeNullableFilter
  groups: GroupMemberManyRelationFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserLocalAuthWhereInput {
  AND: [UserLocalAuthWhereInput!]
  OR: [UserLocalAuthWhereInput!]
  NOT: [UserLocalAuthWhereInput!]
  id: IDFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input GroupMemberManyRelationFilter {
  every: GroupMemberWhereInput
  some: GroupMemberWhereInput
  none: GroupMemberWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  groups: GroupMemberRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input GroupMemberRelateToManyForUpdateInput {
  disconnect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  lastName: String
  email: String
  adminPassword: String
  avatar: ImageFieldInput
  role: UserRoleType
  createdAt: DateTime
  groups: GroupMemberRelateToManyForCreateInput
}

input GroupMemberRelateToManyForCreateInput {
  create: [GroupMemberCreateInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

type Group {
  id: ID!
  name: String
  members(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  membersCount(where: GroupMemberWhereInput! = {}): Int
  botConfig: BotConfig
  conversationBotConfig: ConversationBotConfig
  ghlAccess: GHLAccess
  aiKey: AIKey
  enable_globalWelcome: Boolean
  enable_globalContactUpdate: Boolean
  enable_globalAutoReply: Boolean
  check_dndNotice: Boolean
  dndNoticeMessage: String
  enable_checkDnd: Boolean
  enable_checkProfanity: Boolean
  enable_botIsAssistant: Boolean
  botAssistantName: String
  enable_noSSN: Boolean
  contactConfigs: JSON
  availability_start: Int
  availability_end: Int
  availability_enabled: Boolean
  user_contextFields: JSON
  enable_profileBuilder: Boolean
  enable_activeSurvey: Boolean
  activeSurveySample: String
  aiLogs(where: GroupAILogWhereInput! = {}, orderBy: [GroupAILogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupAILogWhereUniqueInput): [GroupAILog!]
  aiLogsCount(where: GroupAILogWhereInput! = {}): Int
  snippets(where: SnippetWhereInput! = {}, orderBy: [SnippetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SnippetWhereUniqueInput): [Snippet!]
  snippetsCount(where: SnippetWhereInput! = {}): Int
  agent_firstName: String
  agent_lastName: String
  enable_stopNotice: Boolean
  branding: Branding
  analytic: Analytic
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  members: GroupMemberManyRelationFilter
  botConfig: BotConfigWhereInput
  conversationBotConfig: ConversationBotConfigWhereInput
  ghlAccess: GHLAccessWhereInput
  aiKey: AIKeyWhereInput
  enable_globalWelcome: BooleanFilter
  enable_globalContactUpdate: BooleanFilter
  enable_globalAutoReply: BooleanFilter
  check_dndNotice: BooleanFilter
  dndNoticeMessage: StringFilter
  enable_checkDnd: BooleanFilter
  enable_checkProfanity: BooleanFilter
  enable_botIsAssistant: BooleanFilter
  botAssistantName: StringFilter
  enable_noSSN: BooleanFilter
  availability_start: IntNullableFilter
  availability_end: IntNullableFilter
  availability_enabled: BooleanFilter
  enable_profileBuilder: BooleanFilter
  enable_activeSurvey: BooleanFilter
  activeSurveySample: StringFilter
  aiLogs: GroupAILogManyRelationFilter
  snippets: SnippetManyRelationFilter
  agent_firstName: StringFilter
  agent_lastName: StringFilter
  enable_stopNotice: BooleanFilter
  branding: BrandingWhereInput
  analytic: AnalyticWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input GroupAILogManyRelationFilter {
  every: GroupAILogWhereInput
  some: GroupAILogWhereInput
  none: GroupAILogWhereInput
}

input SnippetManyRelationFilter {
  every: SnippetWhereInput
  some: SnippetWhereInput
  none: SnippetWhereInput
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  enable_globalWelcome: OrderDirection
  enable_globalContactUpdate: OrderDirection
  enable_globalAutoReply: OrderDirection
  check_dndNotice: OrderDirection
  dndNoticeMessage: OrderDirection
  enable_checkDnd: OrderDirection
  enable_checkProfanity: OrderDirection
  enable_botIsAssistant: OrderDirection
  botAssistantName: OrderDirection
  enable_noSSN: OrderDirection
  availability_start: OrderDirection
  availability_end: OrderDirection
  availability_enabled: OrderDirection
  enable_profileBuilder: OrderDirection
  enable_activeSurvey: OrderDirection
  activeSurveySample: OrderDirection
  agent_firstName: OrderDirection
  agent_lastName: OrderDirection
  enable_stopNotice: OrderDirection
}

input GroupUpdateInput {
  name: String
  members: GroupMemberRelateToManyForUpdateInput
  botConfig: BotConfigRelateToOneForUpdateInput
  conversationBotConfig: ConversationBotConfigRelateToOneForUpdateInput
  ghlAccess: GHLAccessRelateToOneForUpdateInput
  aiKey: AIKeyRelateToOneForUpdateInput
  enable_globalWelcome: Boolean
  enable_globalContactUpdate: Boolean
  enable_globalAutoReply: Boolean
  check_dndNotice: Boolean
  dndNoticeMessage: String
  enable_checkDnd: Boolean
  enable_checkProfanity: Boolean
  enable_botIsAssistant: Boolean
  botAssistantName: String
  enable_noSSN: Boolean
  contactConfigs: JSON
  availability_start: Int
  availability_end: Int
  availability_enabled: Boolean
  user_contextFields: JSON
  enable_profileBuilder: Boolean
  enable_activeSurvey: Boolean
  activeSurveySample: String
  aiLogs: GroupAILogRelateToManyForUpdateInput
  snippets: SnippetRelateToManyForUpdateInput
  agent_firstName: String
  agent_lastName: String
  enable_stopNotice: Boolean
  branding: BrandingRelateToOneForUpdateInput
  analytic: AnalyticRelateToOneForUpdateInput
}

input BotConfigRelateToOneForUpdateInput {
  create: BotConfigCreateInput
  connect: BotConfigWhereUniqueInput
  disconnect: Boolean
}

input ConversationBotConfigRelateToOneForUpdateInput {
  create: ConversationBotConfigCreateInput
  connect: ConversationBotConfigWhereUniqueInput
  disconnect: Boolean
}

input GHLAccessRelateToOneForUpdateInput {
  create: GHLAccessCreateInput
  connect: GHLAccessWhereUniqueInput
  disconnect: Boolean
}

input AIKeyRelateToOneForUpdateInput {
  create: AIKeyCreateInput
  connect: AIKeyWhereUniqueInput
  disconnect: Boolean
}

input GroupAILogRelateToManyForUpdateInput {
  disconnect: [GroupAILogWhereUniqueInput!]
  set: [GroupAILogWhereUniqueInput!]
  create: [GroupAILogCreateInput!]
  connect: [GroupAILogWhereUniqueInput!]
}

input SnippetRelateToManyForUpdateInput {
  disconnect: [SnippetWhereUniqueInput!]
  set: [SnippetWhereUniqueInput!]
  create: [SnippetCreateInput!]
  connect: [SnippetWhereUniqueInput!]
}

input BrandingRelateToOneForUpdateInput {
  create: BrandingCreateInput
  connect: BrandingWhereUniqueInput
  disconnect: Boolean
}

input AnalyticRelateToOneForUpdateInput {
  create: AnalyticCreateInput
  connect: AnalyticWhereUniqueInput
  disconnect: Boolean
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  members: GroupMemberRelateToManyForCreateInput
  botConfig: BotConfigRelateToOneForCreateInput
  conversationBotConfig: ConversationBotConfigRelateToOneForCreateInput
  ghlAccess: GHLAccessRelateToOneForCreateInput
  aiKey: AIKeyRelateToOneForCreateInput
  enable_globalWelcome: Boolean
  enable_globalContactUpdate: Boolean
  enable_globalAutoReply: Boolean
  check_dndNotice: Boolean
  dndNoticeMessage: String
  enable_checkDnd: Boolean
  enable_checkProfanity: Boolean
  enable_botIsAssistant: Boolean
  botAssistantName: String
  enable_noSSN: Boolean
  contactConfigs: JSON
  availability_start: Int
  availability_end: Int
  availability_enabled: Boolean
  user_contextFields: JSON
  enable_profileBuilder: Boolean
  enable_activeSurvey: Boolean
  activeSurveySample: String
  aiLogs: GroupAILogRelateToManyForCreateInput
  snippets: SnippetRelateToManyForCreateInput
  agent_firstName: String
  agent_lastName: String
  enable_stopNotice: Boolean
  branding: BrandingRelateToOneForCreateInput
  analytic: AnalyticRelateToOneForCreateInput
}

input BotConfigRelateToOneForCreateInput {
  create: BotConfigCreateInput
  connect: BotConfigWhereUniqueInput
}

input ConversationBotConfigRelateToOneForCreateInput {
  create: ConversationBotConfigCreateInput
  connect: ConversationBotConfigWhereUniqueInput
}

input GHLAccessRelateToOneForCreateInput {
  create: GHLAccessCreateInput
  connect: GHLAccessWhereUniqueInput
}

input AIKeyRelateToOneForCreateInput {
  create: AIKeyCreateInput
  connect: AIKeyWhereUniqueInput
}

input GroupAILogRelateToManyForCreateInput {
  create: [GroupAILogCreateInput!]
  connect: [GroupAILogWhereUniqueInput!]
}

input SnippetRelateToManyForCreateInput {
  create: [SnippetCreateInput!]
  connect: [SnippetWhereUniqueInput!]
}

input BrandingRelateToOneForCreateInput {
  create: BrandingCreateInput
  connect: BrandingWhereUniqueInput
}

input AnalyticRelateToOneForCreateInput {
  create: AnalyticCreateInput
  connect: AnalyticWhereUniqueInput
}

type GroupAILog {
  id: ID!
  group: Group
  contactID: String
  contactName: String
  locationID: String
  locationName: String
  modelID: String
  type: String
  status: String
  log: JSON
}

input GroupAILogWhereUniqueInput {
  id: ID
}

input GroupAILogWhereInput {
  AND: [GroupAILogWhereInput!]
  OR: [GroupAILogWhereInput!]
  NOT: [GroupAILogWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  contactID: StringFilter
  contactName: StringFilter
  locationID: StringFilter
  locationName: StringFilter
  modelID: StringFilter
  type: StringFilter
  status: StringFilter
}

input GroupAILogOrderByInput {
  id: OrderDirection
  contactID: OrderDirection
  contactName: OrderDirection
  locationID: OrderDirection
  locationName: OrderDirection
  modelID: OrderDirection
  type: OrderDirection
  status: OrderDirection
}

input GroupAILogUpdateInput {
  group: GroupRelateToOneForUpdateInput
  contactID: String
  contactName: String
  locationID: String
  locationName: String
  modelID: String
  type: String
  status: String
  log: JSON
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input GroupAILogUpdateArgs {
  where: GroupAILogWhereUniqueInput!
  data: GroupAILogUpdateInput!
}

input GroupAILogCreateInput {
  group: GroupRelateToOneForCreateInput
  contactID: String
  contactName: String
  locationID: String
  locationName: String
  modelID: String
  type: String
  status: String
  log: JSON
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

type GroupMember {
  id: ID!
  group: Group
  user: User
  access: Int
}

input GroupMemberWhereUniqueInput {
  id: ID
}

input GroupMemberWhereInput {
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  user: UserWhereInput
  access: IntNullableFilter
}

input GroupMemberOrderByInput {
  id: OrderDirection
  access: OrderDirection
}

input GroupMemberUpdateInput {
  group: GroupRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  access: Int
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input GroupMemberUpdateArgs {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateInput!
}

input GroupMemberCreateInput {
  group: GroupRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  access: Int
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type BotConfig {
  id: ID!
  name: String
  companyStatement: String
  tonestyle: String
  priorityPlan: String
  healthInsuranceCarriers: String
  presentationStrategy: String
  specificQuestions: String
  summaryPrompt: String
  welcomeMessage: String
  welcomeMessageFormat: String
  noZipCodeMessage: String
  group: Group
  sessions(where: ChatSessionWhereInput! = {}, orderBy: [ChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatSessionWhereUniqueInput): [ChatSession!]
  sessionsCount(where: ChatSessionWhereInput! = {}): Int
}

input BotConfigWhereUniqueInput {
  id: ID
}

input BotConfigWhereInput {
  AND: [BotConfigWhereInput!]
  OR: [BotConfigWhereInput!]
  NOT: [BotConfigWhereInput!]
  id: IDFilter
  name: StringFilter
  companyStatement: StringFilter
  tonestyle: StringFilter
  priorityPlan: StringFilter
  healthInsuranceCarriers: StringFilter
  presentationStrategy: StringFilter
  specificQuestions: StringFilter
  summaryPrompt: StringFilter
  welcomeMessage: StringFilter
  welcomeMessageFormat: StringFilter
  noZipCodeMessage: StringFilter
  group: GroupWhereInput
  sessions: ChatSessionManyRelationFilter
}

input ChatSessionManyRelationFilter {
  every: ChatSessionWhereInput
  some: ChatSessionWhereInput
  none: ChatSessionWhereInput
}

input BotConfigOrderByInput {
  id: OrderDirection
  name: OrderDirection
  companyStatement: OrderDirection
  tonestyle: OrderDirection
  priorityPlan: OrderDirection
  healthInsuranceCarriers: OrderDirection
  presentationStrategy: OrderDirection
  specificQuestions: OrderDirection
  summaryPrompt: OrderDirection
  welcomeMessage: OrderDirection
  welcomeMessageFormat: OrderDirection
  noZipCodeMessage: OrderDirection
}

input BotConfigUpdateInput {
  name: String
  companyStatement: String
  tonestyle: String
  priorityPlan: String
  healthInsuranceCarriers: String
  presentationStrategy: String
  specificQuestions: String
  summaryPrompt: String
  welcomeMessage: String
  welcomeMessageFormat: String
  noZipCodeMessage: String
  group: GroupRelateToOneForUpdateInput
  sessions: ChatSessionRelateToManyForUpdateInput
}

input ChatSessionRelateToManyForUpdateInput {
  disconnect: [ChatSessionWhereUniqueInput!]
  set: [ChatSessionWhereUniqueInput!]
  create: [ChatSessionCreateInput!]
  connect: [ChatSessionWhereUniqueInput!]
}

input BotConfigUpdateArgs {
  where: BotConfigWhereUniqueInput!
  data: BotConfigUpdateInput!
}

input BotConfigCreateInput {
  name: String
  companyStatement: String
  tonestyle: String
  priorityPlan: String
  healthInsuranceCarriers: String
  presentationStrategy: String
  specificQuestions: String
  summaryPrompt: String
  welcomeMessage: String
  welcomeMessageFormat: String
  noZipCodeMessage: String
  group: GroupRelateToOneForCreateInput
  sessions: ChatSessionRelateToManyForCreateInput
}

input ChatSessionRelateToManyForCreateInput {
  create: [ChatSessionCreateInput!]
  connect: [ChatSessionWhereUniqueInput!]
}

type ConversationBotConfig {
  id: ID!
  name: String
  companyStatement: String
  tonestyle: String
  priorityPlan: String
  healthInsuranceCarriers: String
  presentationStrategy: String
  specificQuestions: String
  summaryPrompt: String
  welcomeMessage: String
  welcomeMessageFormat: String
  noZipCodeMessage: String
  group: Group
  sessions(where: ChatConversationSessionWhereInput! = {}, orderBy: [ChatConversationSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatConversationSessionWhereUniqueInput): [ChatConversationSession!]
  sessionsCount(where: ChatConversationSessionWhereInput! = {}): Int
}

input ConversationBotConfigWhereUniqueInput {
  id: ID
}

input ConversationBotConfigWhereInput {
  AND: [ConversationBotConfigWhereInput!]
  OR: [ConversationBotConfigWhereInput!]
  NOT: [ConversationBotConfigWhereInput!]
  id: IDFilter
  name: StringFilter
  companyStatement: StringFilter
  tonestyle: StringFilter
  priorityPlan: StringFilter
  healthInsuranceCarriers: StringFilter
  presentationStrategy: StringFilter
  specificQuestions: StringFilter
  summaryPrompt: StringFilter
  welcomeMessage: StringFilter
  welcomeMessageFormat: StringFilter
  noZipCodeMessage: StringFilter
  group: GroupWhereInput
  sessions: ChatConversationSessionManyRelationFilter
}

input ChatConversationSessionManyRelationFilter {
  every: ChatConversationSessionWhereInput
  some: ChatConversationSessionWhereInput
  none: ChatConversationSessionWhereInput
}

input ConversationBotConfigOrderByInput {
  id: OrderDirection
  name: OrderDirection
  companyStatement: OrderDirection
  tonestyle: OrderDirection
  priorityPlan: OrderDirection
  healthInsuranceCarriers: OrderDirection
  presentationStrategy: OrderDirection
  specificQuestions: OrderDirection
  summaryPrompt: OrderDirection
  welcomeMessage: OrderDirection
  welcomeMessageFormat: OrderDirection
  noZipCodeMessage: OrderDirection
}

input ConversationBotConfigUpdateInput {
  name: String
  companyStatement: String
  tonestyle: String
  priorityPlan: String
  healthInsuranceCarriers: String
  presentationStrategy: String
  specificQuestions: String
  summaryPrompt: String
  welcomeMessage: String
  welcomeMessageFormat: String
  noZipCodeMessage: String
  group: GroupRelateToOneForUpdateInput
  sessions: ChatConversationSessionRelateToManyForUpdateInput
}

input ChatConversationSessionRelateToManyForUpdateInput {
  disconnect: [ChatConversationSessionWhereUniqueInput!]
  set: [ChatConversationSessionWhereUniqueInput!]
  create: [ChatConversationSessionCreateInput!]
  connect: [ChatConversationSessionWhereUniqueInput!]
}

input ConversationBotConfigUpdateArgs {
  where: ConversationBotConfigWhereUniqueInput!
  data: ConversationBotConfigUpdateInput!
}

input ConversationBotConfigCreateInput {
  name: String
  companyStatement: String
  tonestyle: String
  priorityPlan: String
  healthInsuranceCarriers: String
  presentationStrategy: String
  specificQuestions: String
  summaryPrompt: String
  welcomeMessage: String
  welcomeMessageFormat: String
  noZipCodeMessage: String
  group: GroupRelateToOneForCreateInput
  sessions: ChatConversationSessionRelateToManyForCreateInput
}

input ChatConversationSessionRelateToManyForCreateInput {
  create: [ChatConversationSessionCreateInput!]
  connect: [ChatConversationSessionWhereUniqueInput!]
}

type Snippet {
  id: ID!
  name: String
  tags: String
  content: String
  comment: String
  group: Group
}

input SnippetWhereUniqueInput {
  id: ID
}

input SnippetWhereInput {
  AND: [SnippetWhereInput!]
  OR: [SnippetWhereInput!]
  NOT: [SnippetWhereInput!]
  id: IDFilter
  name: StringFilter
  tags: StringFilter
  content: StringFilter
  comment: StringFilter
  group: GroupWhereInput
}

input SnippetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  tags: OrderDirection
  content: OrderDirection
  comment: OrderDirection
}

input SnippetUpdateInput {
  name: String
  tags: String
  content: String
  comment: String
  group: GroupRelateToOneForUpdateInput
}

input SnippetUpdateArgs {
  where: SnippetWhereUniqueInput!
  data: SnippetUpdateInput!
}

input SnippetCreateInput {
  name: String
  tags: String
  content: String
  comment: String
  group: GroupRelateToOneForCreateInput
}

type GHLAccess {
  id: ID!
  group: Group
  refreshToken: String
  ghsUserId: String
  planId: String
  locationId: String
  companyId: String
  scope: String
  updatedAt: DateTime
}

input GHLAccessWhereUniqueInput {
  id: ID
}

input GHLAccessWhereInput {
  AND: [GHLAccessWhereInput!]
  OR: [GHLAccessWhereInput!]
  NOT: [GHLAccessWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  refreshToken: StringFilter
  ghsUserId: StringFilter
  planId: StringFilter
  locationId: StringFilter
  companyId: StringFilter
  scope: StringFilter
  updatedAt: DateTimeNullableFilter
}

input GHLAccessOrderByInput {
  id: OrderDirection
  refreshToken: OrderDirection
  ghsUserId: OrderDirection
  planId: OrderDirection
  locationId: OrderDirection
  companyId: OrderDirection
  scope: OrderDirection
  updatedAt: OrderDirection
}

input GHLAccessUpdateInput {
  group: GroupRelateToOneForUpdateInput
  refreshToken: String
  ghsUserId: String
  planId: String
  locationId: String
  companyId: String
  scope: String
  updatedAt: DateTime
}

input GHLAccessUpdateArgs {
  where: GHLAccessWhereUniqueInput!
  data: GHLAccessUpdateInput!
}

input GHLAccessCreateInput {
  group: GroupRelateToOneForCreateInput
  refreshToken: String
  ghsUserId: String
  planId: String
  locationId: String
  companyId: String
  scope: String
  updatedAt: DateTime
}

type AIKey {
  id: ID!
  group: Group
  openapiKey: String
}

input AIKeyWhereUniqueInput {
  id: ID
}

input AIKeyWhereInput {
  AND: [AIKeyWhereInput!]
  OR: [AIKeyWhereInput!]
  NOT: [AIKeyWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  openapiKey: StringFilter
}

input AIKeyOrderByInput {
  id: OrderDirection
  openapiKey: OrderDirection
}

input AIKeyUpdateInput {
  group: GroupRelateToOneForUpdateInput
  openapiKey: String
}

input AIKeyUpdateArgs {
  where: AIKeyWhereUniqueInput!
  data: AIKeyUpdateInput!
}

input AIKeyCreateInput {
  group: GroupRelateToOneForCreateInput
  openapiKey: String
}

type ChatSession {
  id: ID!
  keywords: String
  sessionData: JSON
  botConfig: BotConfig
}

input ChatSessionWhereUniqueInput {
  id: ID
}

input ChatSessionWhereInput {
  AND: [ChatSessionWhereInput!]
  OR: [ChatSessionWhereInput!]
  NOT: [ChatSessionWhereInput!]
  id: IDFilter
  keywords: StringFilter
  botConfig: BotConfigWhereInput
}

input ChatSessionOrderByInput {
  id: OrderDirection
  keywords: OrderDirection
}

input ChatSessionUpdateInput {
  keywords: String
  sessionData: JSON
  botConfig: BotConfigRelateToOneForUpdateInput
}

input ChatSessionUpdateArgs {
  where: ChatSessionWhereUniqueInput!
  data: ChatSessionUpdateInput!
}

input ChatSessionCreateInput {
  keywords: String
  sessionData: JSON
  botConfig: BotConfigRelateToOneForCreateInput
}

type ChatConversationSession {
  id: ID!
  keywords: String
  sessionData: JSON
  botConfig: ConversationBotConfig
}

input ChatConversationSessionWhereUniqueInput {
  id: ID
}

input ChatConversationSessionWhereInput {
  AND: [ChatConversationSessionWhereInput!]
  OR: [ChatConversationSessionWhereInput!]
  NOT: [ChatConversationSessionWhereInput!]
  id: IDFilter
  keywords: StringFilter
  botConfig: ConversationBotConfigWhereInput
}

input ChatConversationSessionOrderByInput {
  id: OrderDirection
  keywords: OrderDirection
}

input ChatConversationSessionUpdateInput {
  keywords: String
  sessionData: JSON
  botConfig: ConversationBotConfigRelateToOneForUpdateInput
}

input ChatConversationSessionUpdateArgs {
  where: ChatConversationSessionWhereUniqueInput!
  data: ChatConversationSessionUpdateInput!
}

input ChatConversationSessionCreateInput {
  keywords: String
  sessionData: JSON
  botConfig: ConversationBotConfigRelateToOneForCreateInput
}

type Branding {
  id: ID!
  group: Group
  companyName: String
  companyMotto: String
  companyPhone: String
  companyEmail: String
  companyAddress: String
  companyWebsite: String
  companyDescription: String
  bannerLogoPhotoUrl: String
  lifestylePhotoUrls: JSON
  logoPhotoUrl: String
  colorPalette1: String
  colorPalette1Contrast: String
  colorPalette2: String
  colorPalette2Contrast: String
  backgroundColor: String
  textColor: String
}

input BrandingWhereUniqueInput {
  id: ID
}

input BrandingWhereInput {
  AND: [BrandingWhereInput!]
  OR: [BrandingWhereInput!]
  NOT: [BrandingWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  companyName: StringFilter
  companyMotto: StringFilter
  companyPhone: StringFilter
  companyEmail: StringFilter
  companyAddress: StringFilter
  companyWebsite: StringFilter
  companyDescription: StringFilter
  bannerLogoPhotoUrl: StringFilter
  logoPhotoUrl: StringFilter
  colorPalette1: StringFilter
  colorPalette1Contrast: StringFilter
  colorPalette2: StringFilter
  colorPalette2Contrast: StringFilter
  backgroundColor: StringFilter
  textColor: StringFilter
}

input BrandingOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
  companyMotto: OrderDirection
  companyPhone: OrderDirection
  companyEmail: OrderDirection
  companyAddress: OrderDirection
  companyWebsite: OrderDirection
  companyDescription: OrderDirection
  bannerLogoPhotoUrl: OrderDirection
  logoPhotoUrl: OrderDirection
  colorPalette1: OrderDirection
  colorPalette1Contrast: OrderDirection
  colorPalette2: OrderDirection
  colorPalette2Contrast: OrderDirection
  backgroundColor: OrderDirection
  textColor: OrderDirection
}

input BrandingUpdateInput {
  group: GroupRelateToOneForUpdateInput
  companyName: String
  companyMotto: String
  companyPhone: String
  companyEmail: String
  companyAddress: String
  companyWebsite: String
  companyDescription: String
  bannerLogoPhotoUrl: String
  lifestylePhotoUrls: JSON
  logoPhotoUrl: String
  colorPalette1: String
  colorPalette1Contrast: String
  colorPalette2: String
  colorPalette2Contrast: String
  backgroundColor: String
  textColor: String
}

input BrandingUpdateArgs {
  where: BrandingWhereUniqueInput!
  data: BrandingUpdateInput!
}

input BrandingCreateInput {
  group: GroupRelateToOneForCreateInput
  companyName: String
  companyMotto: String
  companyPhone: String
  companyEmail: String
  companyAddress: String
  companyWebsite: String
  companyDescription: String
  bannerLogoPhotoUrl: String
  lifestylePhotoUrls: JSON
  logoPhotoUrl: String
  colorPalette1: String
  colorPalette1Contrast: String
  colorPalette2: String
  colorPalette2Contrast: String
  backgroundColor: String
  textColor: String
}

type Analytic {
  id: ID!
  group: Group
  utm_baseurl: String
  utm_source: String
  utm_medium: String
  utm_campaign: String
  utm_language: String
  generated_marketing_url: String
  direct_link: String
  google_analytics_id: String
}

input AnalyticWhereUniqueInput {
  id: ID
}

input AnalyticWhereInput {
  AND: [AnalyticWhereInput!]
  OR: [AnalyticWhereInput!]
  NOT: [AnalyticWhereInput!]
  id: IDFilter
  group: GroupWhereInput
  utm_baseurl: StringFilter
  utm_source: StringFilter
  utm_medium: StringFilter
  utm_campaign: StringFilter
  utm_language: StringFilter
  generated_marketing_url: StringFilter
  direct_link: StringFilter
  google_analytics_id: StringFilter
}

input AnalyticOrderByInput {
  id: OrderDirection
  utm_baseurl: OrderDirection
  utm_source: OrderDirection
  utm_medium: OrderDirection
  utm_campaign: OrderDirection
  utm_language: OrderDirection
  generated_marketing_url: OrderDirection
  direct_link: OrderDirection
  google_analytics_id: OrderDirection
}

input AnalyticUpdateInput {
  group: GroupRelateToOneForUpdateInput
  utm_baseurl: String
  utm_source: String
  utm_medium: String
  utm_campaign: String
  utm_language: String
  generated_marketing_url: String
  direct_link: String
  google_analytics_id: String
}

input AnalyticUpdateArgs {
  where: AnalyticWhereUniqueInput!
  data: AnalyticUpdateInput!
}

input AnalyticCreateInput {
  group: GroupRelateToOneForCreateInput
  utm_baseurl: String
  utm_source: String
  utm_medium: String
  utm_campaign: String
  utm_language: String
  generated_marketing_url: String
  direct_link: String
  google_analytics_id: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createServerLog(data: ServerLogCreateInput!): ServerLog
  createServerLogs(data: [ServerLogCreateInput!]!): [ServerLog]
  updateServerLog(where: ServerLogWhereUniqueInput!, data: ServerLogUpdateInput!): ServerLog
  updateServerLogs(data: [ServerLogUpdateArgs!]!): [ServerLog]
  deleteServerLog(where: ServerLogWhereUniqueInput!): ServerLog
  deleteServerLogs(where: [ServerLogWhereUniqueInput!]!): [ServerLog]
  createServerError(data: ServerErrorCreateInput!): ServerError
  createServerErrors(data: [ServerErrorCreateInput!]!): [ServerError]
  updateServerError(where: ServerErrorWhereUniqueInput!, data: ServerErrorUpdateInput!): ServerError
  updateServerErrors(data: [ServerErrorUpdateArgs!]!): [ServerError]
  deleteServerError(where: ServerErrorWhereUniqueInput!): ServerError
  deleteServerErrors(where: [ServerErrorWhereUniqueInput!]!): [ServerError]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createGroupAILog(data: GroupAILogCreateInput!): GroupAILog
  createGroupAILogs(data: [GroupAILogCreateInput!]!): [GroupAILog]
  updateGroupAILog(where: GroupAILogWhereUniqueInput!, data: GroupAILogUpdateInput!): GroupAILog
  updateGroupAILogs(data: [GroupAILogUpdateArgs!]!): [GroupAILog]
  deleteGroupAILog(where: GroupAILogWhereUniqueInput!): GroupAILog
  deleteGroupAILogs(where: [GroupAILogWhereUniqueInput!]!): [GroupAILog]
  createGroupMember(data: GroupMemberCreateInput!): GroupMember
  createGroupMembers(data: [GroupMemberCreateInput!]!): [GroupMember]
  updateGroupMember(where: GroupMemberWhereUniqueInput!, data: GroupMemberUpdateInput!): GroupMember
  updateGroupMembers(data: [GroupMemberUpdateArgs!]!): [GroupMember]
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteGroupMembers(where: [GroupMemberWhereUniqueInput!]!): [GroupMember]
  createBotConfig(data: BotConfigCreateInput!): BotConfig
  createBotConfigs(data: [BotConfigCreateInput!]!): [BotConfig]
  updateBotConfig(where: BotConfigWhereUniqueInput!, data: BotConfigUpdateInput!): BotConfig
  updateBotConfigs(data: [BotConfigUpdateArgs!]!): [BotConfig]
  deleteBotConfig(where: BotConfigWhereUniqueInput!): BotConfig
  deleteBotConfigs(where: [BotConfigWhereUniqueInput!]!): [BotConfig]
  createConversationBotConfig(data: ConversationBotConfigCreateInput!): ConversationBotConfig
  createConversationBotConfigs(data: [ConversationBotConfigCreateInput!]!): [ConversationBotConfig]
  updateConversationBotConfig(where: ConversationBotConfigWhereUniqueInput!, data: ConversationBotConfigUpdateInput!): ConversationBotConfig
  updateConversationBotConfigs(data: [ConversationBotConfigUpdateArgs!]!): [ConversationBotConfig]
  deleteConversationBotConfig(where: ConversationBotConfigWhereUniqueInput!): ConversationBotConfig
  deleteConversationBotConfigs(where: [ConversationBotConfigWhereUniqueInput!]!): [ConversationBotConfig]
  createSnippet(data: SnippetCreateInput!): Snippet
  createSnippets(data: [SnippetCreateInput!]!): [Snippet]
  updateSnippet(where: SnippetWhereUniqueInput!, data: SnippetUpdateInput!): Snippet
  updateSnippets(data: [SnippetUpdateArgs!]!): [Snippet]
  deleteSnippet(where: SnippetWhereUniqueInput!): Snippet
  deleteSnippets(where: [SnippetWhereUniqueInput!]!): [Snippet]
  createGHLAccess(data: GHLAccessCreateInput!): GHLAccess
  createGHLAccesses(data: [GHLAccessCreateInput!]!): [GHLAccess]
  updateGHLAccess(where: GHLAccessWhereUniqueInput!, data: GHLAccessUpdateInput!): GHLAccess
  updateGHLAccesses(data: [GHLAccessUpdateArgs!]!): [GHLAccess]
  deleteGHLAccess(where: GHLAccessWhereUniqueInput!): GHLAccess
  deleteGHLAccesses(where: [GHLAccessWhereUniqueInput!]!): [GHLAccess]
  createAIKey(data: AIKeyCreateInput!): AIKey
  createAIKeys(data: [AIKeyCreateInput!]!): [AIKey]
  updateAIKey(where: AIKeyWhereUniqueInput!, data: AIKeyUpdateInput!): AIKey
  updateAIKeys(data: [AIKeyUpdateArgs!]!): [AIKey]
  deleteAIKey(where: AIKeyWhereUniqueInput!): AIKey
  deleteAIKeys(where: [AIKeyWhereUniqueInput!]!): [AIKey]
  createChatSession(data: ChatSessionCreateInput!): ChatSession
  createChatSessions(data: [ChatSessionCreateInput!]!): [ChatSession]
  updateChatSession(where: ChatSessionWhereUniqueInput!, data: ChatSessionUpdateInput!): ChatSession
  updateChatSessions(data: [ChatSessionUpdateArgs!]!): [ChatSession]
  deleteChatSession(where: ChatSessionWhereUniqueInput!): ChatSession
  deleteChatSessions(where: [ChatSessionWhereUniqueInput!]!): [ChatSession]
  createChatConversationSession(data: ChatConversationSessionCreateInput!): ChatConversationSession
  createChatConversationSessions(data: [ChatConversationSessionCreateInput!]!): [ChatConversationSession]
  updateChatConversationSession(where: ChatConversationSessionWhereUniqueInput!, data: ChatConversationSessionUpdateInput!): ChatConversationSession
  updateChatConversationSessions(data: [ChatConversationSessionUpdateArgs!]!): [ChatConversationSession]
  deleteChatConversationSession(where: ChatConversationSessionWhereUniqueInput!): ChatConversationSession
  deleteChatConversationSessions(where: [ChatConversationSessionWhereUniqueInput!]!): [ChatConversationSession]
  createBranding(data: BrandingCreateInput!): Branding
  createBrandings(data: [BrandingCreateInput!]!): [Branding]
  updateBranding(where: BrandingWhereUniqueInput!, data: BrandingUpdateInput!): Branding
  updateBrandings(data: [BrandingUpdateArgs!]!): [Branding]
  deleteBranding(where: BrandingWhereUniqueInput!): Branding
  deleteBrandings(where: [BrandingWhereUniqueInput!]!): [Branding]
  createAnalytic(data: AnalyticCreateInput!): Analytic
  createAnalytics(data: [AnalyticCreateInput!]!): [Analytic]
  updateAnalytic(where: AnalyticWhereUniqueInput!, data: AnalyticUpdateInput!): Analytic
  updateAnalytics(data: [AnalyticUpdateArgs!]!): [Analytic]
  deleteAnalytic(where: AnalyticWhereUniqueInput!): Analytic
  deleteAnalytics(where: [AnalyticWhereUniqueInput!]!): [Analytic]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, adminPassword: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  authclient_login(email: String!, password: String!): ClientItemAuthenticationWithPasswordResult
  authclient_register(email: String!, firstName: String, lastName: String, password: String!): Boolean
  authclient_requestPasswordReset(email: String!): Boolean
  authclient_resetPassword(token: String!, password: String!): Boolean
  authclient_changePassword(oldPassword: String!, newPassword: String!): Boolean
  ghl_sendMessage(input: Ghl_sendMessageInput!): GHLMessageReturn
  ghl_setCustomFields(input: Ghl_setCustomFieldsInput!): [String]
  ghl_breakCustomFieldsCache(input: Ghl_breakCustomFieldsCacheInput!): Boolean
  queue_deletePendingMessage(input: Queue_deletePendingMessageInput!): QueuePendingMessages
  file_generateUploadURL(input: File_generateUploadURLInput!): FileUploadURL
}

union ClientItemAuthenticationWithPasswordResult = ClientItemAuthenticationWithPasswordSuccess | ClientItemAuthenticationWithPasswordFailure

type ClientItemAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type ClientItemAuthenticationWithPasswordFailure {
  message: String!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  adminPassword: String
}

type Query {
  serverLogs(where: ServerLogWhereInput! = {}, orderBy: [ServerLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerLogWhereUniqueInput): [ServerLog!]
  serverLog(where: ServerLogWhereUniqueInput!): ServerLog
  serverLogsCount(where: ServerLogWhereInput! = {}): Int
  serverErrors(where: ServerErrorWhereInput! = {}, orderBy: [ServerErrorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerErrorWhereUniqueInput): [ServerError!]
  serverError(where: ServerErrorWhereUniqueInput!): ServerError
  serverErrorsCount(where: ServerErrorWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  groupAILogs(where: GroupAILogWhereInput! = {}, orderBy: [GroupAILogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupAILogWhereUniqueInput): [GroupAILog!]
  groupAILog(where: GroupAILogWhereUniqueInput!): GroupAILog
  groupAILogsCount(where: GroupAILogWhereInput! = {}): Int
  groupMembers(where: GroupMemberWhereInput! = {}, orderBy: [GroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupMemberWhereUniqueInput): [GroupMember!]
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembersCount(where: GroupMemberWhereInput! = {}): Int
  botConfigs(where: BotConfigWhereInput! = {}, orderBy: [BotConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BotConfigWhereUniqueInput): [BotConfig!]
  botConfig(where: BotConfigWhereUniqueInput!): BotConfig
  botConfigsCount(where: BotConfigWhereInput! = {}): Int
  conversationBotConfigs(where: ConversationBotConfigWhereInput! = {}, orderBy: [ConversationBotConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConversationBotConfigWhereUniqueInput): [ConversationBotConfig!]
  conversationBotConfig(where: ConversationBotConfigWhereUniqueInput!): ConversationBotConfig
  conversationBotConfigsCount(where: ConversationBotConfigWhereInput! = {}): Int
  snippets(where: SnippetWhereInput! = {}, orderBy: [SnippetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SnippetWhereUniqueInput): [Snippet!]
  snippet(where: SnippetWhereUniqueInput!): Snippet
  snippetsCount(where: SnippetWhereInput! = {}): Int
  gHLAccesses(where: GHLAccessWhereInput! = {}, orderBy: [GHLAccessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GHLAccessWhereUniqueInput): [GHLAccess!]
  gHLAccess(where: GHLAccessWhereUniqueInput!): GHLAccess
  gHLAccessesCount(where: GHLAccessWhereInput! = {}): Int
  aIKeys(where: AIKeyWhereInput! = {}, orderBy: [AIKeyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AIKeyWhereUniqueInput): [AIKey!]
  aIKey(where: AIKeyWhereUniqueInput!): AIKey
  aIKeysCount(where: AIKeyWhereInput! = {}): Int
  chatSessions(where: ChatSessionWhereInput! = {}, orderBy: [ChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatSessionWhereUniqueInput): [ChatSession!]
  chatSession(where: ChatSessionWhereUniqueInput!): ChatSession
  chatSessionsCount(where: ChatSessionWhereInput! = {}): Int
  chatConversationSessions(where: ChatConversationSessionWhereInput! = {}, orderBy: [ChatConversationSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatConversationSessionWhereUniqueInput): [ChatConversationSession!]
  chatConversationSession(where: ChatConversationSessionWhereUniqueInput!): ChatConversationSession
  chatConversationSessionsCount(where: ChatConversationSessionWhereInput! = {}): Int
  brandings(where: BrandingWhereInput! = {}, orderBy: [BrandingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandingWhereUniqueInput): [Branding!]
  branding(where: BrandingWhereUniqueInput!): Branding
  brandingsCount(where: BrandingWhereInput! = {}): Int
  analytics(where: AnalyticWhereInput! = {}, orderBy: [AnalyticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AnalyticWhereUniqueInput): [Analytic!]
  analytic(where: AnalyticWhereUniqueInput!): Analytic
  analyticsCount(where: AnalyticWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  ErrorTest: String
  ghl_accessToken(input: Ghl_accessTokenInput!): String
  ghl_me(input: Ghl_meInput!): GHLMeReturn
  ghl_getContacts(input: Ghl_getContactsInput!): GHLContactList
  ghl_getMessages(input: Ghl_getMessagesInput!): String
  ghl_getCustomFields(input: Ghl_getCustomFieldsInput!): GHLCustomFieldData
  queue_getPendingMessages(input: Queue_getPendingMessagesInput!): QueuePendingMessages
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type GHLMessageReturn {
  message: String!
  contactID: String!
  thread: String!
}

input Ghl_sendMessageInput {
  groupID: String!
  contactID: String!
  location_id: String!
  actualSend: Boolean
  zip_code: String
  first_name: String
  last_name: String
  dob: String
  state: String
  gender: String
  how_many_people_in_your_household_need_to_be_on_the_plan: String
  yearly_income: String
  number_of_tax_dependents: String
  has_tax_dependents: String
  spouse_name: String
  projected_annual_household_income: String
  agent_first_name: String
  agent_last_name: String
}

input Ghl_accessTokenInput {
  groupID: String!
}

type GHLMeReturnBusiness {
  name: String!
  address: String!
  city: String!
  state: String!
  country: String!
  postalCode: String!
  website: String!
  timezone: String!
  logoUrl: String!
}

type GHLMeReturn {
  name: String!
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  address: String!
  state: String!
  country: String!
  postalCode: String!
  business: GHLMeReturnBusiness!
}

input Ghl_meInput {
  groupID: String!
}

type GHLContact {
  id: String
  locationId: String
  firstName: String
  lastName: String
  contactName: String
  email: String
  timezone: String
  country: String
  source: String
  dateAdded: String
  businessId: String
}

type GHLContactList {
  contacts: [GHLContact]
}

input Ghl_getContactsInput {
  groupID: String!
  query: String
}

input Ghl_getMessagesInput {
  groupID: String!
  conversationID: String!
}

type GHLCustomFieldData {
  customFields: [GHLCustomField]
}

type GHLCustomField {
  id: String!
  name: String!
  fieldKey: String
  placeholder: String
  dataType: String
  position: Float
  picklistOptions: [String]
  picklistImageOptions: [String]
  isAllowedCustomOption: Boolean
  isMultiFileAllowed: Boolean
  maxFileLimit: Float
  locationId: String
  model: String
}

input Ghl_getCustomFieldsInput {
  groupID: String!
}

input Ghl_setCustomFieldsInputCustomFields {
  id: String
  name: String
  action: String!
}

input Ghl_setCustomFieldsInput {
  groupID: String!
  customFields: [Ghl_setCustomFieldsInputCustomFields]!
}

input Ghl_breakCustomFieldsCacheInput {
  groupID: String!
}

type QueuePendingMessages {
  queue: [QueuePendingMessage]
}

type QueuePendingMessageDataOffTimeConfig {
  timezone: String
}

type QueuePendingMessageData {
  groupID: String
  groupName: String
  contactID: String
  contactName: String
  type: String
  message: String
  offTimeConfig: QueuePendingMessageDataOffTimeConfig
  forceSend: Boolean
}

type QueuePendingMessage {
  id: String!
  data: QueuePendingMessageData!
  delay: Float!
  delayString: String!
}

input Queue_getPendingMessagesInput {
  groupID: String!
}

input Queue_deletePendingMessageInput {
  groupID: String!
  ids: [String]!
}

type FileUploadURL {
  getURL: String!
  putURL: String!
}

input File_generateUploadURLInput {
  fileID: String!
}
